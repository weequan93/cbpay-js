{"version":3,"sources":["../src/config.ts","../src/onramp/generateOnRampURL.ts","../src/offramp/generateOffRampURL.ts","../src/utils/createEmbeddedContent.ts","../src/utils/postMessage.ts","../src/utils/CoinbasePixel.ts","../src/utils/CBPayInstance.ts","../src/onramp/initOnRamp.ts","../src/utils/events.ts"],"sourcesContent":["export const DEFAULT_HOST = 'https://pay.coinbase.com';\n","import { DEFAULT_HOST } from '../config';\nimport { OnRampAppParams } from '../types/onramp';\nimport type { Theme } from '../types/widget';\n\nexport type GenerateOnRampURLOptions = {\n  /** This & destinationWallets or sessionToken are required. */\n  appId?: string;\n  host?: string;\n  /** This or appId & destinationWallets are required. */\n  sessionToken?: string;\n  theme?: Theme;\n} & OnRampAppParams;\n\nexport const generateOnRampURL = ({\n  host = DEFAULT_HOST,\n  ...props\n}: GenerateOnRampURLOptions): string => {\n  const url = new URL(host);\n  url.pathname = '/buy/select-asset';\n\n  if (props.destinationWallets && props.addresses) {\n    throw new Error('Only one of destinationWallets or addresses can be provided');\n  } else if (!props.destinationWallets && !props.addresses) {\n    throw new Error('One of destinationWallets or addresses must be provided');\n  }\n\n  (Object.keys(props) as (keyof typeof props)[]).forEach((key) => {\n    const value = props[key];\n    if (value !== undefined) {\n      if (['string', 'number', 'boolean'].includes(typeof value)) {\n        url.searchParams.append(key, value.toString());\n      } else {\n        url.searchParams.append(key, JSON.stringify(value));\n      }\n    }\n  });\n\n  url.searchParams.sort();\n\n  return url.toString();\n};\n","import { OffRampAppParams } from 'types/offramp';\nimport { DEFAULT_HOST } from '../config';\nimport type { Theme } from '../types/widget';\n\nexport type GenerateOffRampURLOptions = {\n  /** This & addresses or sessionToken are required. */\n  appId?: string;\n  host?: string;\n  theme?: Theme;\n  /** This or appId & addresses are required. */\n  sessionToken?: string;\n} & OffRampAppParams;\n\nexport const generateOffRampURL = ({\n  host = DEFAULT_HOST,\n  ...props\n}: GenerateOffRampURLOptions): string => {\n  const url = new URL(host);\n  url.pathname = '/v3/sell/input';\n\n  (Object.keys(props) as (keyof typeof props)[]).forEach((key) => {\n    const value = props[key];\n    if (value !== undefined) {\n      if (['string', 'number', 'boolean'].includes(typeof value)) {\n        url.searchParams.append(key, value.toString());\n      } else {\n        url.searchParams.append(key, JSON.stringify(value));\n      }\n    }\n  });\n\n  url.searchParams.sort();\n\n  return url.toString();\n};\n","import { EmbeddedContentStyles } from 'types/widget';\n\nexport const EMBEDDED_IFRAME_ID = 'cbpay-embedded-onramp';\n\nexport const createEmbeddedContent = ({\n  url,\n  width = '100%',\n  height = '100%',\n  position = 'fixed',\n  top = '0px',\n}: {\n  url: string;\n} & EmbeddedContentStyles): HTMLIFrameElement => {\n  const iframe = document.createElement('iframe');\n\n  // Styles\n  iframe.style.border = 'unset';\n  iframe.style.borderWidth = '0';\n  iframe.style.width = width.toString();\n  iframe.style.height = height.toString();\n  iframe.style.position = position;\n  iframe.style.top = top;\n  iframe.id = EMBEDDED_IFRAME_ID;\n  iframe.src = url;\n\n  return iframe;\n};\n","import { JsonObject } from '../types/JsonTypes';\n\nexport enum MessageCodes {\n  LaunchEmbedded = 'launch_embedded',\n  AppReady = 'app_ready',\n  AppParams = 'app_params',\n  SigninSuccess = 'signin_success',\n  Success = 'success', // TODO: deprecate\n  Exit = 'exit', // TODO: deprecate\n  Event = 'event',\n  Error = 'error',\n\n  PixelReady = 'pixel_ready',\n  OnAppParamsNonce = 'on_app_params_nonce',\n}\n\nexport type MessageCode = `${MessageCodes}`;\n\nexport type MessageData = JsonObject;\n\nexport type PostMessageData = {\n  eventName: MessageCode;\n  data?: MessageData;\n};\n\nexport const onBroadcastedPostMessage = (\n  messageCode: MessageCode,\n  {\n    onMessage: callback,\n    shouldUnsubscribe = true,\n    allowedOrigin,\n    onValidateOrigin = () => Promise.resolve(true),\n  }: {\n    onMessage: (data?: MessageData) => void;\n    shouldUnsubscribe?: boolean;\n    allowedOrigin?: string;\n    onValidateOrigin?: (origin: string) => Promise<boolean>;\n  },\n): (() => void) => {\n  const onMessage = (e: MessageEvent) => {\n    const { eventName, data } = parsePostMessage(e.data as string);\n    const isOriginAllowed = !allowedOrigin || e.origin === allowedOrigin;\n\n    if (eventName === messageCode) {\n      void (async () => {\n        if (isOriginAllowed && (await onValidateOrigin(e.origin))) {\n          callback(data);\n          if (shouldUnsubscribe) {\n            window.removeEventListener('message', onMessage);\n          }\n        }\n      })();\n    }\n  };\n\n  window.addEventListener('message', onMessage);\n\n  // Unsubscribe\n  return () => {\n    window.removeEventListener('message', onMessage);\n  };\n};\n\nexport type SdkTarget = Window | { postMessage: typeof window.postMessage };\n\nexport const getSdkTarget = (win: Window): SdkTarget | undefined => {\n  if (win !== window) {\n    // Internal to SDK\n    return win;\n  } else if (isMobileSdkTarget(win)) {\n    // Mobile SDK\n    // eslint-disable-next-line @typescript-eslint/no-non-null-assertion\n    return { postMessage: (message: string) => win.ReactNativeWebView!.postMessage!(message) };\n  } else if (win.opener) {\n    // Button proxy\n    return win.opener;\n  } else if (win.parent !== win.self) {\n    // Third party / SDK\n    return win.parent;\n  } else {\n    return undefined;\n  }\n};\n\nconst isMobileSdkTarget = (win: Window) => {\n  try {\n    return win.ReactNativeWebView?.postMessage !== undefined;\n  } catch {\n    return false;\n  }\n};\n\nexport const broadcastPostMessage = (\n  win: SdkTarget,\n  eventName: MessageCode,\n  { allowedOrigin = '*', data }: { allowedOrigin?: string; data?: MessageData } = {},\n): void => {\n  const message = formatPostMessage(eventName, data);\n  win.postMessage(message, allowedOrigin);\n};\n\nconst parsePostMessage = (data: string): PostMessageData => {\n  try {\n    return JSON.parse(data) as PostMessageData;\n  } catch {\n    return { eventName: data as MessageCode }; // event name only\n  }\n};\n\nconst formatPostMessage = (\n  eventName: PostMessageData['eventName'],\n  data?: PostMessageData['data'],\n): string => {\n  if (data) {\n    return JSON.stringify({ eventName, data });\n  }\n  return eventName;\n};\n","import { DEFAULT_HOST } from '../config';\nimport { EmbeddedContentStyles, Experience, Theme } from 'types/widget';\nimport { createEmbeddedContent, EMBEDDED_IFRAME_ID } from './createEmbeddedContent';\nimport { JsonObject } from 'types/JsonTypes';\nimport { onBroadcastedPostMessage } from './postMessage';\nimport { EventMetadata } from 'types/events';\nimport { generateOnRampURL } from '../onramp/generateOnRampURL';\nimport { generateOffRampURL } from '../offramp/generateOffRampURL';\n\nconst PopupSizes: Record<'signin' | 'widget', { width: number; height: number }> = {\n  signin: {\n    width: 460,\n    height: 730,\n  },\n  widget: {\n    width: 430,\n    height: 600,\n  },\n};\n\nexport type ExperienceListeners = {\n  onExit?: (data?: JsonObject) => void;\n  onSuccess?: (data?: JsonObject) => void;\n  onEvent?: (event: EventMetadata) => void;\n  onRequestedUrl?: (url: string) => void;\n};\n\nexport type CoinbasePixelConstructorParams = {\n  host?: string;\n  appId: string;\n  appParams: JsonObject;\n  debug?: boolean;\n  theme?: Theme;\n};\n\nexport type OpenExperienceOptions = {\n  path: string;\n  experienceLoggedIn: Experience;\n  experienceLoggedOut?: Experience;\n  embeddedContentStyles?: EmbeddedContentStyles;\n} & ExperienceListeners;\n\nexport class CoinbasePixel {\n  private debug: boolean;\n  private host: string;\n  private appId: string;\n  private eventStreamListeners: Partial<Record<EventMetadata['eventName'], (() => void)[]>> = {};\n  private unsubs: (() => void)[] = [];\n  private appParams: JsonObject;\n  private removeEventListener?: () => void;\n  private theme: Theme | null | undefined;\n\n  constructor({\n    host = DEFAULT_HOST,\n    appId,\n    appParams,\n    debug,\n    theme,\n  }: CoinbasePixelConstructorParams) {\n    this.host = host;\n    this.appId = appId;\n    this.appParams = appParams;\n    this.debug = debug || false;\n    this.theme = theme;\n  }\n\n  /** Opens the CB Pay experience */\n  public openExperience = (options: OpenExperienceOptions): void => {\n    this.log('Attempting to open experience');\n\n    this.setupExperienceListeners(options);\n\n    const { experienceLoggedIn, experienceLoggedOut, embeddedContentStyles } = options;\n\n    const experience = experienceLoggedOut || experienceLoggedIn;\n\n    let url = '';\n    if (options.path === '/v3/sell') {\n      url = generateOffRampURL({\n        appId: this.appId,\n        host: this.host,\n        theme: this.theme ?? undefined,\n        ...this.appParams,\n      });\n    } else {\n      url = generateOnRampURL({\n        appId: this.appId,\n        host: this.host,\n        theme: this.theme ?? undefined,\n        ...this.appParams,\n      });\n    }\n\n    this.log('Opening experience', { experience });\n\n    if (experience === 'embedded') {\n      this.log(\n        'DEPRECATION WARNING: Two factor authentication does not work in an iframe, so the embedded experience should not be used. It will be removed in a future release',\n      );\n      const openEmbeddedExperience = () => {\n        const embedded = createEmbeddedContent({ url, ...embeddedContentStyles });\n        if (embeddedContentStyles?.target) {\n          document.querySelector(embeddedContentStyles?.target)?.replaceChildren(embedded);\n        } else {\n          document.body.appendChild(embedded);\n        }\n      };\n\n      this.startDirectSignin(openEmbeddedExperience);\n    } else if (experience === 'popup' && window.chrome?.windows?.create) {\n      void window.chrome.windows.create(\n        {\n          url,\n          setSelfAsOpener: true,\n          type: 'popup',\n          focused: true,\n          width: PopupSizes.signin.width,\n          height: PopupSizes.signin.height,\n          left: window.screenLeft - PopupSizes.signin.width - 10,\n          top: window.screenTop,\n        },\n        (winRef) => {\n          const onOpenCallback = () => {\n            if (winRef?.id) {\n              chrome.windows.update(winRef.id, {\n                width: PopupSizes.widget.width,\n                height: PopupSizes.widget.height,\n                left: window.screenLeft - PopupSizes.widget.width - 10,\n                top: window.screenTop,\n              });\n              this.removeEventStreamListener('open', onOpenCallback);\n            }\n          };\n          this.addEventStreamListener('open', onOpenCallback);\n        },\n      );\n    } else if (experience === 'new_tab' && window.chrome?.tabs?.create) {\n      void window.chrome.tabs.create({ url });\n    } else {\n      openWindow(url, experience);\n    }\n  };\n\n  public endExperience = (): void => {\n    document.getElementById(EMBEDDED_IFRAME_ID)?.remove();\n  };\n\n  public destroy = (): void => {\n    this.unsubs.forEach((unsub) => unsub());\n  };\n\n  private setupExperienceListeners = ({\n    onSuccess,\n    onExit,\n    onEvent,\n    onRequestedUrl,\n  }: ExperienceListeners) => {\n    // Unsubscribe from events in case there's still an active listener\n    if (this.removeEventListener) {\n      this.removeEventListener();\n    }\n\n    this.removeEventListener = this.onMessage('event', {\n      shouldUnsubscribe: false,\n      onMessage: (data) => {\n        const metadata = data as EventMetadata;\n\n        this.eventStreamListeners[metadata.eventName]?.forEach((cb) => cb?.());\n\n        if (metadata.eventName === 'success') {\n          onSuccess?.();\n        }\n        if (metadata.eventName === 'exit') {\n          onExit?.(metadata.error);\n        }\n        if (metadata.eventName === 'request_open_url') {\n          onRequestedUrl?.(metadata.url);\n        }\n        onEvent?.(data as EventMetadata);\n      },\n    });\n  };\n\n  private startDirectSignin = (callback: () => void) => {\n    const queryParams = new URLSearchParams();\n    queryParams.set('appId', this.appId);\n    queryParams.set('type', 'direct');\n    const directSigninUrl = `${this.host}/signin?${queryParams.toString()}`;\n    const signinWinRef = openWindow(directSigninUrl, 'popup');\n\n    this.onMessage('signin_success', {\n      onMessage: () => {\n        signinWinRef?.close();\n        callback();\n      },\n    });\n  };\n\n  private addEventStreamListener = (name: EventMetadata['eventName'], cb: () => void) => {\n    if (this.eventStreamListeners[name]) {\n      this.eventStreamListeners[name]?.push(cb);\n    } else {\n      this.eventStreamListeners[name] = [cb];\n    }\n  };\n\n  private removeEventStreamListener = (name: EventMetadata['eventName'], callback: () => void) => {\n    if (this.eventStreamListeners[name]) {\n      const filteredListeners = this.eventStreamListeners[name]?.filter((cb) => cb !== callback);\n      this.eventStreamListeners[name] = filteredListeners;\n    }\n  };\n\n  private onMessage = (...args: Parameters<typeof onBroadcastedPostMessage>) => {\n    const unsubFxn = onBroadcastedPostMessage(args[0], { allowedOrigin: this.host, ...args[1] });\n    this.unsubs.push(unsubFxn);\n\n    return unsubFxn;\n  };\n\n  private log = (...args: Parameters<typeof console.log>) => {\n    if (this.debug) {\n      console.log('[CBPAY]', ...args);\n    }\n  };\n}\n\nfunction openWindow(url: string, experience: Experience) {\n  return window.open(\n    url,\n    'Coinbase',\n    experience === 'popup'\n      ? `toolbar=no, location=no, directories=no, status=no, menubar=no, scrollbars=no, resizable=no, copyhistory=no, height=${PopupSizes.signin.height},width=${PopupSizes.signin.width}`\n      : undefined,\n  );\n}\n","import { JsonObject } from 'types/JsonTypes';\nimport { CBPayExperienceOptions, Experience, WidgetType } from 'types/widget';\nimport { CoinbasePixel } from './CoinbasePixel';\n\nexport type InternalExperienceOptions = Omit<\n  CBPayExperienceOptions<JsonObject>,\n  'widgetParameters'\n> & {\n  widget: WidgetType;\n  experienceLoggedIn: Experience; // Required\n};\n\nexport type CBPayInstanceConstructorArguments = {\n  appParams: JsonObject;\n} & InternalExperienceOptions;\n\nconst widgetRoutes: Record<WidgetType, string> = {\n  buy: '/buy',\n  checkout: '/checkout',\n  sell: '/v3/sell',\n};\n\nexport interface CBPayInstanceType {\n  open: () => void;\n  destroy: () => void;\n}\n\nexport class CBPayInstance implements CBPayInstanceType {\n  private pixel: CoinbasePixel;\n  private options: InternalExperienceOptions;\n\n  constructor(options: CBPayInstanceConstructorArguments) {\n    this.options = options;\n    this.pixel = new CoinbasePixel({\n      ...options,\n      appParams: {\n        widget: options.widget,\n        ...options.appParams,\n      },\n    });\n\n    if (options.target) {\n      const targetElement = document.querySelector(options.target);\n      if (targetElement) {\n        targetElement.addEventListener('click', this.open);\n      }\n    }\n  }\n\n  public open = (): void => {\n    const {\n      widget,\n      experienceLoggedIn,\n      experienceLoggedOut,\n      embeddedContentStyles,\n      onExit,\n      onSuccess,\n      onEvent,\n      onRequestedUrl,\n      closeOnSuccess,\n      closeOnExit,\n    } = this.options;\n\n    this.pixel.openExperience({\n      path: widgetRoutes[widget],\n      experienceLoggedIn,\n      experienceLoggedOut,\n      embeddedContentStyles,\n      onExit: () => {\n        onExit?.();\n        if (closeOnExit) {\n          this.pixel.endExperience();\n        }\n      },\n      onSuccess: () => {\n        onSuccess?.();\n        if (closeOnSuccess) {\n          this.pixel.endExperience();\n        }\n      },\n      onRequestedUrl,\n      onEvent,\n    });\n  };\n\n  public destroy = (): void => {\n    this.pixel.destroy();\n  };\n}\n","import { CBPayExperienceOptions } from '../types/widget';\nimport { CBPayInstance, CBPayInstanceType } from '../utils/CBPayInstance';\nimport { OnRampAppParams } from '../types/onramp';\n\nexport type InitOnRampParams = CBPayExperienceOptions<OnRampAppParams>;\n\nexport type InitOnRampCallback = {\n  (error: Error, instance: null): void;\n  (error: null, instance: CBPayInstanceType): void;\n};\n\nexport const initOnRamp = (\n  {\n    experienceLoggedIn = 'new_tab', // default experience type\n    widgetParameters,\n    ...options\n  }: InitOnRampParams,\n  callback: InitOnRampCallback,\n): void => {\n  const instance = new CBPayInstance({\n    ...options,\n    widget: 'buy',\n    experienceLoggedIn,\n    appParams: widgetParameters,\n  });\n  callback(null, instance);\n};\n","import { EventMetadata } from 'types/events';\nimport { broadcastPostMessage, SdkTarget } from './postMessage';\n\nexport function broadcastEvent(sdkTarget: SdkTarget, event: EventMetadata): void {\n  broadcastPostMessage(sdkTarget, 'event', {\n    data: event,\n  });\n}\n"],"mappings":"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","names":["DEFAULT_HOST","generateOnRampURL","host","DEFAULT_HOST","props","url","URL","pathname","destinationWallets","addresses","Error","Object","keys","forEach","key","value","undefined","includes","searchParams","append","toString","JSON","stringify","sort","generateOffRampURL","host","DEFAULT_HOST","props","url","URL","pathname","Object","keys","forEach","key","value","undefined","includes","searchParams","append","toString","JSON","stringify","sort","EMBEDDED_IFRAME_ID","createEmbeddedContent","url","width","height","position","top","iframe","document","createElement","style","border","borderWidth","toString","id","src","MessageCodes","onBroadcastedPostMessage","messageCode","onMessage","callback","shouldUnsubscribe","allowedOrigin","onValidateOrigin","Promise","resolve","e","eventName","data","parsePostMessage","isOriginAllowed","origin","window","removeEventListener","addEventListener","getSdkTarget","win","isMobileSdkTarget","postMessage","message","ReactNativeWebView","opener","parent","self","undefined","broadcastPostMessage","formatPostMessage","JSON","parse","stringify","PopupSizes","signin","width","height","widget","CoinbasePixel","constructor","host","DEFAULT_HOST","appId","appParams","debug","theme","eventStreamListeners","unsubs","removeEventListener","openExperience","options","log","setupExperienceListeners","experienceLoggedIn","experienceLoggedOut","embeddedContentStyles","experience","url","path","generateOffRampURL","undefined","generateOnRampURL","openEmbeddedExperience","embedded","createEmbeddedContent","target","document","querySelector","replaceChildren","body","appendChild","startDirectSignin","window","chrome","windows","create","setSelfAsOpener","type","focused","left","screenLeft","top","screenTop","winRef","onOpenCallback","id","update","removeEventStreamListener","addEventStreamListener","tabs","openWindow","endExperience","getElementById","EMBEDDED_IFRAME_ID","remove","destroy","forEach","unsub","onSuccess","onExit","onEvent","onRequestedUrl","onMessage","shouldUnsubscribe","data","metadata","eventName","cb","error","callback","queryParams","URLSearchParams","set","directSigninUrl","toString","signinWinRef","close","name","push","filteredListeners","filter","args","unsubFxn","onBroadcastedPostMessage","allowedOrigin","console","open","widgetRoutes","buy","checkout","sell","CBPayInstance","constructor","options","pixel","open","widget","experienceLoggedIn","experienceLoggedOut","embeddedContentStyles","onExit","onSuccess","onEvent","onRequestedUrl","closeOnSuccess","closeOnExit","openExperience","path","endExperience","destroy","CoinbasePixel","appParams","target","targetElement","document","querySelector","addEventListener","initOnRamp","experienceLoggedIn","widgetParameters","options","callback","instance","CBPayInstance","widget","appParams","broadcastEvent","sdkTarget","event","broadcastPostMessage","data"]}